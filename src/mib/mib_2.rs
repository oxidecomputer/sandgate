/*
 * Copyright 2024 Oxide Computer Company
 */

use super::sublude::*;

#[derive(Debug, Deserialize)]
#[serde(rename_all = "PascalCase")]
#[allow(unused)]
pub struct System {
    descr: String,
    object_id: Oid,
    #[serde(rename = "UpTime")]
    /**
     * The uptime of the system management component in hundredths of a second.
     */
    uptime: u32,
    contact: String,
    name: String,
    location: String,
    services: u32,
}

impl System {
    pub fn name(&self) -> &str {
        &self.name
    }

    pub fn description(&self) -> &str {
        &self.descr
    }

    pub fn contact(&self) -> &str {
        &self.contact
    }

    pub fn location(&self) -> &str {
        &self.location
    }

    pub fn uptime(&self) -> Duration {
        let uptime: u64 = self.uptime.into();
        Duration::from_secs(uptime.saturating_mul(10))
    }

    pub fn object_id(&self) -> Oid {
        self.object_id
    }

    pub async fn from_client(snmp: &Client) -> Result<System> {
        let top = snmp
            .tree
            .oid_by_name("internet.mgmt.mib-2.system")
            .map_err(|e| anyhow!("{e} (is mib-2 in the OID tree?)"))?;

        let res = snmp.walk(top).await?;

        let o = res.extract_object(top, "sys")?;
        Ok(o)
    }
}

#[derive(Deserialize_repr, PartialEq, Eq, Debug)]
#[repr(i32)]
pub enum IfOperStatus {
    Up = 1,
    Down = 2,
    Testing = 3,
    Unknown = 4,
    Dormant = 5,
    NotPresent = 6,
    LowerLayerDown = 7,
}

#[derive(Deserialize_repr, PartialEq, Eq, Debug)]
#[repr(i32)]
pub enum IfAdminStatus {
    Up = 1,
    Down = 2,
    Testing = 3,
}

#[derive(Deserialize_repr, PartialEq, Eq, Debug)]
#[repr(i32)]
pub enum IfType {
    Other = 1,
    Regular1822 = 2,
    Hdh1822 = 3,
    DdnX25 = 4,
    Rfc877x25 = 5,
    EthernetCsmacd = 6,
    Iso88023Csmacd = 7,
    Iso88024TokenBus = 8,
    Iso88025TokenRing = 9,
    Iso88026Man = 10,
    StarLan = 11,
    Proteon10Mbit = 12,
    Proteon80Mbit = 13,
    Hyperchannel = 14,
    Fddi = 15,
    Lapb = 16,
    Sdlc = 17,
    Ds1 = 18,
    E1 = 19,
    BasicISDN = 20,
    PrimaryISDN = 21,
    PropPointToPointSerial = 22,
    Ppp = 23,
    SoftwareLoopback = 24,
    Eon = 25,
    Ethernet3Mbit = 26,
    Nsip = 27,
    Slip = 28,
    Ultra = 29,
    Ds3 = 30,
    Sip = 31,
    FrameRelay = 32,
    Rs232 = 33,
    Para = 34,
    Arcnet = 35,
    ArcnetPlus = 36,
    Atm = 37,
    Miox25 = 38,
    Sonet = 39,
    X25ple = 40,
    Iso88022llc = 41,
    LocalTalk = 42,
    SmdsDxi = 43,
    FrameRelayService = 44,
    V35 = 45,
    Hssi = 46,
    Hippi = 47,
    Modem = 48,
    Aal5 = 49,
    SonetPath = 50,
    SonetVT = 51,
    SmdsIcip = 52,
    PropVirtual = 53,
    PropMultiplexor = 54,
    Ieee80212 = 55,
    FibreChannel = 56,
    HippiInterface = 57,
    FrameRelayInterconnect = 58,
    Aflane8023 = 59,
    Aflane8025 = 60,
    CctEmul = 61,
    FastEther = 62,
    Isdn = 63,
    V11 = 64,
    V36 = 65,
    G703at64k = 66,
    G703at2mb = 67,
    Qllc = 68,
    FastEtherFX = 69,
    Channel = 70,
    Ieee80211 = 71,
    Ibm370parChan = 72,
    Escon = 73,
    Dlsw = 74,
    Isdns = 75,
    Isdnu = 76,
    Lapd = 77,
    IpSwitch = 78,
    Rsrb = 79,
    AtmLogical = 80,
    Ds0 = 81,
    Ds0Bundle = 82,
    Bsc = 83,
    Async = 84,
    Cnr = 85,
    Iso88025Dtr = 86,
    Eplrs = 87,
    Arap = 88,
    PropCnls = 89,
    HostPad = 90,
    TermPad = 91,
    FrameRelayMPI = 92,
    X213 = 93,
    Adsl = 94,
    Radsl = 95,
    Sdsl = 96,
    Vdsl = 97,
    Iso88025CRFPInt = 98,
    Myrinet = 99,
    VoiceEM = 100,
    VoiceFXO = 101,
    VoiceFXS = 102,
    VoiceEncap = 103,
    VoiceOverIp = 104,
    AtmDxi = 105,
    AtmFuni = 106,
    AtmIma = 107,
    PppMultilinkBundle = 108,
    IpOverCdlc = 109,
    IpOverClaw = 110,
    StackToStack = 111,
    VirtualIpAddress = 112,
    Mpc = 113,
    IpOverAtm = 114,
    Iso88025Fiber = 115,
    Tdlc = 116,
    GigabitEthernet = 117,
    Hdlc = 118,
    Lapf = 119,
    V37 = 120,
    X25mlp = 121,
    X25huntGroup = 122,
    TranspHdlc = 123,
    Interleave = 124,
    Fast = 125,
    Ip = 126,
    DocsCableMaclayer = 127,
    DocsCableDownstream = 128,
    DocsCableUpstream = 129,
    A12MppSwitch = 130,
    Tunnel = 131,
    Coffee = 132,
    Ces = 133,
    AtmSubInterface = 134,
    L2vlan = 135,
    L3ipvlan = 136,
    L3ipxvlan = 137,
    DigitalPowerline = 138,
    MediaMailOverIp = 139,
    Dtm = 140,
    Dcn = 141,
    IpForward = 142,
    Msdsl = 143,
    Ieee1394 = 144,
    IfGsn = 145,
    DvbRccMacLayer = 146,
    DvbRccDownstream = 147,
    DvbRccUpstream = 148,
    AtmVirtual = 149,
    MplsTunnel = 150,
    Srp = 151,
    VoiceOverAtm = 152,
    VoiceOverFrameRelay = 153,
    Idsl = 154,
    CompositeLink = 155,
    Ss7SigLink = 156,
    PropWirelessP2P = 157,
    FrForward = 158,
    Rfc1483 = 159,
    Usb = 160,
    Ieee8023adLag = 161,
    Bgppolicyaccounting = 162,
    Frf16MfrBundle = 163,
    H323Gatekeeper = 164,
    H323Proxy = 165,
    Mpls = 166,
    MfSigLink = 167,
    Hdsl2 = 168,
    Shdsl = 169,
    Ds1FDL = 170,
    Pos = 171,
    DvbAsiIn = 172,
    DvbAsiOut = 173,
    Plc = 174,
    Nfas = 175,
    Tr008 = 176,
    Gr303RDT = 177,
    Gr303IDT = 178,
    Isup = 179,
    PropDocsWirelessMaclayer = 180,
    PropDocsWirelessDownstream = 181,
    PropDocsWirelessUpstream = 182,
    Hiperlan2 = 183,
    PropBWAp2Mp = 184,
    SonetOverheadChannel = 185,
    DigitalWrapperOverheadChannel = 186,
    Aal2 = 187,
    RadioMAC = 188,
    AtmRadio = 189,
    Imt = 190,
    Mvl = 191,
    ReachDSL = 192,
    FrDlciEndPt = 193,
    AtmVciEndPt = 194,
    OpticalChannel = 195,
    OpticalTransport = 196,
    PropAtm = 197,
    VoiceOverCable = 198,
    Infiniband = 199,
    TeLink = 200,
    Q2931 = 201,
    VirtualTg = 202,
    SipTg = 203,
    SipSig = 204,
    DocsCableUpstreamChannel = 205,
    Econet = 206,
    Pon155 = 207,
    Pon622 = 208,
    Bridge = 209,
    Linegroup = 210,
    VoiceEMFGD = 211,
    VoiceFGDEANA = 212,
    VoiceDID = 213,
    MpegTransport = 214,
    SixToFour = 215,
    Gtp = 216,
    PdnEtherLoop1 = 217,
    PdnEtherLoop2 = 218,
    OpticalChannelGroup = 219,
    Homepna = 220,
    Gfp = 221,
    CiscoISLvlan = 222,
    ActelisMetaLOOP = 223,
    FcipLink = 224,
    Rpr = 225,
    Qam = 226,
    Lmp = 227,
    CblVectaStar = 228,
    DocsCableMCmtsDownstream = 229,
    Adsl2 = 230,
    MacSecControlledIF = 231,
    MacSecUncontrolledIF = 232,
    AviciOpticalEther = 233,
    Atmbond = 234,
    VoiceFGDOS = 235,
    MocaVersion1 = 236,
    Ieee80216WMAN = 237,
    Adsl2plus = 238,
    DvbRcsMacLayer = 239,
    DvbTdm = 240,
    DvbRcsTdma = 241,
    X86Laps = 242,
    WwanPP = 243,
    WwanPP2 = 244,
    VoiceEBS = 245,
    IfPwType = 246,
    Ilan = 247,
    Pip = 248,
    AluELP = 249,
    Gpon = 250,
    Vdsl2 = 251,
    CapwapDot11Profile = 252,
    CapwapDot11Bss = 253,
    CapwapWtpVirtualRadio = 254,
    Bits = 255,
    DocsCableUpstreamRfPort = 256,
    CableDownstreamRfPort = 257,
    VmwareVirtualNic = 258,
    Ieee802154 = 259,
    OtnOdu = 260,
    OtnOtu = 261,
    IfVfiType = 262,
    G9981 = 263,
    G9982 = 264,
    G9983 = 265,
    AluEpon = 266,
    AluEponOnu = 267,
    AluEponPhysicalUni = 268,
    AluEponLogicalLink = 269,
    AluGponOnu = 270,
    AluGponPhysicalUni = 271,
    VmwareNicTeam = 272,
    DocsOfdmDownstream = 277,
    DocsOfdmaUpstream = 278,
    Gfast = 279,
    Sdci = 280,
    XboxWireless = 281,
    Fastdsl = 282,
    DocsCableScte55d1FwdOob = 283,
    DocsCableScte55d1RetOob = 284,
    DocsCableScte55d2DsOob = 285,
    DocsCableScte55d2UsOob = 286,
    DocsCableNdf = 287,
    DocsCableNdr = 288,
    Ptm = 289,
    Ghn = 290,
    OtnOtsi = 291,
    OtnOtuc = 292,
    OtnOduc = 293,
    OtnOtsig = 294,
    MicrowaveCarrierTermination = 295,
    MicrowaveRadioLinkTerminal = 296,
    Ieee8021axDrni = 297,
    Ax25 = 298,
    Ieee19061nanocom = 299,
    Cpri = 300,
    Omni = 301,
    Roe = 302,
}

pub fn populate(tree: &mut OidTree) -> Result<()> {
    add_from_instructions_under(
        tree,
        "mgmt",
        tree.oid_by_name("internet.mgmt")?.as_slice().to_vec(),
        &[
            ("mib-2", "mgmt", 1),
            /*
             * System group:
             */
            ("system", "mib-2", 1),
            ("sysDescr", "system", 1),
            ("sysObjectId", "system", 2),
            ("sysUpTime", "system", 3),
            ("sysContact", "system", 4),
            ("sysName", "system", 5),
            ("sysLocation", "system", 6),
            ("sysServices", "system", 7),
            ("sysOREntry", "system", 8),
            /*
             * Interfaces group:
             */
            ("interfaces", "mib-2", 2),
            ("ifNumber", "interfaces", 1),
            ("ifTable", "interfaces", 2),
            ("ifEntry", "ifTable", 1),
            ("ifIndex", "ifEntry", 1),
            ("ifDescr", "ifEntry", 2),
            ("ifType", "ifEntry", 3),
            ("ifMtu", "ifEntry", 4),
            ("ifSpeed", "ifEntry", 5),
            ("ifPhysAddress", "ifEntry", 6),
            ("ifAdminStatus", "ifEntry", 7),
            ("ifOperStatus", "ifEntry", 8),
            ("ifLastChange", "ifEntry", 9),
            ("ifInOctets", "ifEntry", 10),
            ("ifInUcastPkts", "ifEntry", 11),
            ("ifInNUcastPkts", "ifEntry", 12),
            ("ifInDiscards", "ifEntry", 13),
            ("ifInErrors", "ifEntry", 14),
            ("ifInUnknownProtos", "ifEntry", 15),
            ("ifOutOctets", "ifEntry", 16),
            ("ifOutUcastPkts", "ifEntry", 17),
            ("ifOutNUcastPkts", "ifEntry", 18),
            ("ifOutDiscards", "ifEntry", 19),
            ("ifOutErrors", "ifEntry", 20),
            ("ifOutQLen", "ifEntry", 21),
            ("ifSpecific", "ifEntry", 22),
        ],
    )
    .map_err(|e| anyhow!("populate_mib2: {e}"))?;

    Ok(())
}
